from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api.formatters import Formatter
from youtube_transcript_api.formatters import JSONFormatter
from youtube_transcript_api.formatters import TextFormatter
from youtube_transcript_api.formatters import WebVTTFormatter

def get_srt(video_id):
    return YouTubeTranscriptApi.list_transcripts(video_id)

def fetch_transcript_by_id(video_id):
    # retrieve the available transcripts
    transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)

    for transcript in transcript_list:
        # the Transcript object provides metadata properties
        print(
            transcript.video_id,
            transcript.language,
            transcript.language_code,
            # whether it has been manually created or generated by YouTube
            transcript.is_generated,
            # whether this transcript can be translated or not
            transcript.is_translatable,
            # a list of languages the transcript can be translated to
            transcript.translation_languages,
        )

        # fetch the actual transcript data
        print(transcript.fetch())
        #filter_transcript(transcript_list, transcript)


def filter_transcript(transcript_list, transcript):
    # translating the transcript will return another transcript object
    print(transcript.translate('en').fetch())

    # you can also directly filter for the language you are looking for, using the transcript list
    transcript = transcript_list.find_transcript(['de', 'en'])

    # or just filter for manually created transcripts
    transcript = transcript_list.find_manually_created_transcript(['de', 'en'])

    # or automatically generated ones
    transcript = transcript_list.find_generated_transcript(['de', 'en'])


def write_to_json_file(video_id):
    # Must be a single transcript.
    transcript = YouTubeTranscriptApi.get_transcript(video_id)
    formatter = JSONFormatter()

    # .format_transcript(transcript) turns the transcript into a JSON string.
    json_formatted = formatter.format_transcript(transcript)

    # Now we can write it out to a file.
    with open('transcript_video_' + video_id + '.json', 'w', encoding='utf-8') as json_file:
        json_file.write(json_formatted)
    # Now should have a new JSON file that you can easily read back into Python.


def write_to_json_file1(video_id, transcript):
    formatter = JSONFormatter()

    # .format_transcript(transcript) turns the transcript into a JSON string.
    json_formatted = formatter.format_transcript(transcript)

    # Now we can write it out to a file.
    with open('transcript_video_' + video_id + '.json', 'w', encoding='utf-8') as json_file:
        json_file.write(json_formatted)
    # Now should have a new JSON file that you can easily read back into Python.

def print_transcript(srt):
    text_list = []
    for i in srt:
        text_list.append(i['text'])

    text = ' '.join(text_list)
    print(text)


def print_all_transcripts(video_ids):
    transcript_list, unretrievable_videos = YouTubeTranscriptApi.get_transcripts(video_ids, continue_after_error=True)
    for video_id in video_ids:
        write_to_json_file(video_id)
        if video_id in transcript_list.keys():
            print("\nvideo_id = ", video_id)

            srt = transcript_list.get(video_id)
            print_transcript(srt)


def print_transcript_by_id(video_id):
    print("\nvideo_id = ", video_id)
    srt = YouTubeTranscriptApi.get_transcript(video_id)
    print_transcript(srt)
    write_to_json_file1(video_id, srt)


videoListName = "youtubeVideoIDlist.txt"

with open(videoListName) as f:
    video_ids = f.read().splitlines()
    print_all_transcripts(video_ids)

    #fetch_transcript_by_id(video_ids[0])
    #print_transcript_by_id(video_ids[0])